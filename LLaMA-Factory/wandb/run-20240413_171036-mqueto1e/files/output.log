  0%|                                                                                              | 0/1580 [00:00<?, ?it/s]/data/yangjunxiao/anaconda3/envs/env38/lib/python3.8/site-packages/torch/utils/checkpoint.py:460: UserWarning: torch.utils.checkpoint: please pass in use_reentrant=True or use_reentrant=False explicitly. The default value of use_reentrant will be updated to be False in the future. To maintain current behavior, pass use_reentrant=True. It is recommended that you use use_reentrant=False. Refer to docs for more details on the differences between the two variants.
  warnings.warn(
/data/yangjunxiao/anaconda3/envs/env38/lib/python3.8/site-packages/torch/autograd/__init__.py:266: UserWarning: c10d::broadcast_: an autograd kernel was not registered to the Autograd key(s) but we are trying to backprop through it. This may lead to silently incorrect behavior. This behavior is deprecated and will be removed in a future version of PyTorch. If your operator is differentiable, please ensure you have registered an autograd kernel to the correct Autograd key (e.g. DispatchKey::Autograd, DispatchKey::CompositeImplicitAutograd). If your operator is not differentiable, or to squash this warning and use the previous behavior, please register torch::CppFunction::makeFallthrough() to DispatchKey::Autograd. (Triggered internally at ../torch/csrc/autograd/autograd_not_implemented_fallback.cpp:63.)
  Variable._execution_engine.run_backward(  # Calls into the C++ engine to run the backward pass
/data/yangjunxiao/anaconda3/envs/env38/lib/python3.8/site-packages/deepspeed/runtime/zero/stage3.py:1274: UserWarning: The torch.cuda.*DtypeTensor constructors are no longer recommended. It's best to use methods such as torch.tensor(data, dtype=*, device='cuda') to create tensors. (Triggered internally at ../torch/csrc/tensor/python_tensor.cpp:83.)
  total_norm_cuda = get_accelerator().FloatTensor([float(total_norm)])
  0%|                                                                                   | 1/1580 [00:37<16:21:46, 37.31s/it]
[2024-04-13 17:11:20,755] [WARNING] [stage3.py:1936:step] 2 pytorch allocator cache flushes since last step. this happens when there is high memory pressure and is detrimental to performance. if this is happening frequently consider adjusting settings to reduce memory consumption. If you are unable to make the cache flushes go away consider adding get_accelerator().empty_cache() calls in your training loop to ensure that all ranks flush their caches at the same time
  0%|                                                                                   | 1/1580 [00:37<16:21:46, 37.31s/it]Traceback (most recent call last):
  File "src/train_bash.py", line 14, in <module>
    main()
  File "src/train_bash.py", line 5, in main
    run_exp()
  File "/data/yangjunxiao/ai4ta/continue_pretraining/LLaMA-Factory/src/llmtuner/train/tuner.py", line 32, in run_exp
    run_pt(model_args, data_args, training_args, finetuning_args, callbacks)
  File "/data/yangjunxiao/ai4ta/continue_pretraining/LLaMA-Factory/src/llmtuner/train/pt/workflow.py", line 43, in run_pt
    train_result = trainer.train(resume_from_checkpoint=training_args.resume_from_checkpoint)
  File "/data/yangjunxiao/anaconda3/envs/env38/lib/python3.8/site-packages/transformers/trainer.py", line 1624, in train
    return inner_training_loop(
  File "/data/yangjunxiao/anaconda3/envs/env38/lib/python3.8/site-packages/transformers/trainer.py", line 1961, in _inner_training_loop
    tr_loss_step = self.training_step(model, inputs)
  File "/data/yangjunxiao/anaconda3/envs/env38/lib/python3.8/site-packages/transformers/trainer.py", line 2902, in training_step
    loss = self.compute_loss(model, inputs)
  File "/data/yangjunxiao/anaconda3/envs/env38/lib/python3.8/site-packages/transformers/trainer.py", line 2925, in compute_loss
    outputs = model(**inputs)
  File "/data/yangjunxiao/anaconda3/envs/env38/lib/python3.8/site-packages/torch/nn/modules/module.py", line 1511, in _wrapped_call_impl
    return self._call_impl(*args, **kwargs)
  File "/data/yangjunxiao/anaconda3/envs/env38/lib/python3.8/site-packages/torch/nn/modules/module.py", line 1520, in _call_impl
    return forward_call(*args, **kwargs)
  File "/data/yangjunxiao/anaconda3/envs/env38/lib/python3.8/site-packages/deepspeed/utils/nvtx.py", line 15, in wrapped_fn
    ret_val = func(*args, **kwargs)
  File "/data/yangjunxiao/anaconda3/envs/env38/lib/python3.8/site-packages/deepspeed/runtime/engine.py", line 1801, in forward
    loss = self.module(*inputs, **kwargs)
  File "/data/yangjunxiao/anaconda3/envs/env38/lib/python3.8/site-packages/torch/nn/modules/module.py", line 1511, in _wrapped_call_impl
    return self._call_impl(*args, **kwargs)
  File "/data/yangjunxiao/anaconda3/envs/env38/lib/python3.8/site-packages/torch/nn/modules/module.py", line 1561, in _call_impl
    result = forward_call(*args, **kwargs)
  File "/home/yangjunxiao/.cache/huggingface/modules/transformers_modules/chatglm3-6b-base/modeling_chatglm.py", line 966, in forward
    lm_logits = lm_logits.to(hidden_states.dtype)
torch.cuda.OutOfMemoryError: CUDA out of memory. Tried to allocate 7.94 GiB. GPU 0 has a total capacity of 79.15 GiB of which 6.62 GiB is free. Including non-PyTorch memory, this process has 72.45 GiB memory in use. Of the allocated memory 67.07 GiB is allocated by PyTorch, and 3.76 GiB is reserved by PyTorch but unallocated. If reserved but unallocated memory is large try setting PYTORCH_CUDA_ALLOC_CONF=expandable_segments:True to avoid fragmentation.  See documentation for Memory Management  (https://pytorch.org/docs/stable/notes/cuda.html#environment-variables)
Traceback (most recent call last):
  File "src/train_bash.py", line 14, in <module>
    main()
  File "src/train_bash.py", line 5, in main
    run_exp()
  File "/data/yangjunxiao/ai4ta/continue_pretraining/LLaMA-Factory/src/llmtuner/train/tuner.py", line 32, in run_exp
    run_pt(model_args, data_args, training_args, finetuning_args, callbacks)
  File "/data/yangjunxiao/ai4ta/continue_pretraining/LLaMA-Factory/src/llmtuner/train/pt/workflow.py", line 43, in run_pt
    train_result = trainer.train(resume_from_checkpoint=training_args.resume_from_checkpoint)
  File "/data/yangjunxiao/anaconda3/envs/env38/lib/python3.8/site-packages/transformers/trainer.py", line 1624, in train
    return inner_training_loop(
  File "/data/yangjunxiao/anaconda3/envs/env38/lib/python3.8/site-packages/transformers/trainer.py", line 1961, in _inner_training_loop
    tr_loss_step = self.training_step(model, inputs)
  File "/data/yangjunxiao/anaconda3/envs/env38/lib/python3.8/site-packages/transformers/trainer.py", line 2902, in training_step
    loss = self.compute_loss(model, inputs)
  File "/data/yangjunxiao/anaconda3/envs/env38/lib/python3.8/site-packages/transformers/trainer.py", line 2925, in compute_loss
    outputs = model(**inputs)
  File "/data/yangjunxiao/anaconda3/envs/env38/lib/python3.8/site-packages/torch/nn/modules/module.py", line 1511, in _wrapped_call_impl
    return self._call_impl(*args, **kwargs)
  File "/data/yangjunxiao/anaconda3/envs/env38/lib/python3.8/site-packages/torch/nn/modules/module.py", line 1520, in _call_impl
    return forward_call(*args, **kwargs)
  File "/data/yangjunxiao/anaconda3/envs/env38/lib/python3.8/site-packages/deepspeed/utils/nvtx.py", line 15, in wrapped_fn
    ret_val = func(*args, **kwargs)
  File "/data/yangjunxiao/anaconda3/envs/env38/lib/python3.8/site-packages/deepspeed/runtime/engine.py", line 1801, in forward
    loss = self.module(*inputs, **kwargs)
  File "/data/yangjunxiao/anaconda3/envs/env38/lib/python3.8/site-packages/torch/nn/modules/module.py", line 1511, in _wrapped_call_impl
    return self._call_impl(*args, **kwargs)
  File "/data/yangjunxiao/anaconda3/envs/env38/lib/python3.8/site-packages/torch/nn/modules/module.py", line 1561, in _call_impl
    result = forward_call(*args, **kwargs)
  File "/home/yangjunxiao/.cache/huggingface/modules/transformers_modules/chatglm3-6b-base/modeling_chatglm.py", line 966, in forward
    lm_logits = lm_logits.to(hidden_states.dtype)
torch.cuda.OutOfMemoryError: CUDA out of memory. Tried to allocate 7.94 GiB. GPU 0 has a total capacity of 79.15 GiB of which 6.62 GiB is free. Including non-PyTorch memory, this process has 72.45 GiB memory in use. Of the allocated memory 67.07 GiB is allocated by PyTorch, and 3.76 GiB is reserved by PyTorch but unallocated. If reserved but unallocated memory is large try setting PYTORCH_CUDA_ALLOC_CONF=expandable_segments:True to avoid fragmentation.  See documentation for Memory Management  (https://pytorch.org/docs/stable/notes/cuda.html#environment-variables)